const { containers, makeSasForBlob }=require('../utils.js');module.exports=async function(context,req){const id=context.bindingData.id;const {videos,comments,ratings}=await containers();const {resource:v}=await videos.item(id,id).read().catch(()=>({}));if(!v){context.res={status:404,body:{error:'Not found'}};return}const container=process.env.STORAGE_VIDEOS_CONTAINER||'videos';const sas=makeSasForBlob(container,v.blobName,2,'r');const streamUrl=sas.blobUrlWithSas;const com=await comments.items.query({query:'SELECT * FROM c WHERE c.videoId=@id ORDER BY c.createdAt DESC',parameters:[{name:'@id',value:id}]}).fetchAll();const r=await ratings.items.query({query:'SELECT c.rating FROM c WHERE c.videoId=@id',parameters:[{name:'@id',value:id}]}).fetchAll();const avg=r.resources.length?r.resources.reduce((a,b)=>a+b.rating,0)/r.resources.length:null;context.res={body:{...v,streamUrl,comments:com.resources,avgRating:avg,ratingCount:r.resources.length}}}