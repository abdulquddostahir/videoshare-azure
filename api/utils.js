const { CosmosClient }=require('@azure/cosmos');const { StorageSharedKeyCredential, generateBlobSASQueryParameters, BlobSASPermissions }=require('@azure/storage-blob');const { TextAnalyticsClient, AzureKeyCredential }=require('@azure/ai-text-analytics');const jwt=require('jsonwebtoken');const bcrypt=require('bcryptjs');const { v4: uuidv4 }=require('uuid');function required(name){const v=process.env[name];if(!v) throw new Error(`Missing app setting: ${name}`);return v}const cosmos=new CosmosClient({ endpoint: required('COSMOS_ENDPOINT'), key: required('COSMOS_KEY') });const dbName=process.env.COSMOS_DB||'videoapp';async function containers(){const db=cosmos.database(dbName);return { users: db.container('users'), videos: db.container('videos'), comments: db.container('comments'), ratings: db.container('ratings') }}function sign(user){const secret=required('APP_SECRET');return jwt.sign({ sub:user.id, email:user.email, role:user.role }, secret, { expiresIn:'7d' })}function verify(req){try{const auth=(req.headers&&(req.headers.authorization||req.headers.Authorization))||'';const token=auth.startsWith('Bearer ')?auth.slice(7):null;if(!token) return null;const secret=required('APP_SECRET');return jwt.verify(token, secret)}catch(e){return null}}async function requireAuth(req){const c=verify(req);return c?null:{status:401,body:{error:'Unauthorized'}}}async function requireCreator(req){const c=verify(req);if(!c) return {status:401,body:{error:'Unauthorized'}};if(c.role!=='creator') return {status:403,body:{error:'Creator role required'}};return null}function blobCred(){const account=required('STORAGE_ACCOUNT');const key=required('STORAGE_KEY');const credential=new StorageSharedKeyCredential(account, key);return { account, credential }}function makeSasForBlob(container, blobName, hours=2, perm='racw'){const { account, credential }=blobCred();const expiresOn=new Date(Date.now()+hours*3600*1000);const sas=generateBlobSASQueryParameters({containerName:container,blobName,permissions:BlobSASPermissions.parse(perm),startsOn:new Date(Date.now()-5*60*1000),expiresOn},credential).toString();const blobUrlWithSas=`https://${account}.blob.core.windows.net/${container}/${blobName}?${sas}`;return { blobUrlWithSas, blobName, container }}async function sentiment(text){const ep=process.env.LANGUAGE_ENDPOINT;const key=process.env.LANGUAGE_KEY;if(!ep||!key) return null;const client=new TextAnalyticsClient(ep, new AzureKeyCredential(key));const res=await client.analyzeSentiment([text]);const r=res[0];if(!r) return null;const score=Math.max(r.confidenceScores.positive,r.confidenceScores.neutral,r.confidenceScores.negative);return { label:r.sentiment, score }}module.exports={ cosmos, dbName, containers, sign, verify, requireAuth, requireCreator, makeSasForBlob, sentiment, uuidv4, bcrypt }
